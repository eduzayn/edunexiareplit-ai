// Script para adicionar rota est√°tica para servir arquivos PDF no Express
const fs = require('fs');
const path = require('path');

// Caminho do arquivo routes.ts
const routesPath = './server/routes.ts';

// Ler o conte√∫do do arquivo
let routesContent = fs.readFileSync(routesPath, 'utf8');

// Verificar se a rota j√° existe
if (routesContent.includes('app.use(\'/uploads/\', express.static(path.join(__dirname, \'../uploads\'))')) {
  console.log('‚úÖ Rota est√°tica para arquivos j√° existe!');
} else {
  // Encontrar a linha antes do "return httpServer" no final da fun√ß√£o
  const insertPosition = routesContent.lastIndexOf('return httpServer');
  
  // C√≥digo da rota est√°tica para inserir
  const staticRouteCode = `
  // Rota est√°tica para servir arquivos de upload
  app.use('/uploads/', express.static(path.join(__dirname, '../uploads')));

  `;
  
  // Inserir o c√≥digo
  const newRoutesContent = routesContent.slice(0, insertPosition) + staticRouteCode + routesContent.slice(insertPosition);
  
  // Salvar o arquivo atualizado
  fs.writeFileSync(routesPath, newRoutesContent);
  console.log('‚úÖ Rota est√°tica para uploads adicionada com sucesso!');
}

// Verificar se o m√≥dulo path j√° est√° importado
if (!routesContent.includes('import path from \'path\'')) {
  // Adicionar a importa√ß√£o do m√≥dulo path
  const importPosition = routesContent.indexOf('import');
  const pathImport = 'import path from \'path\';\n';
  
  const contentWithPathImport = routesContent.slice(0, importPosition) + pathImport + routesContent.slice(importPosition);
  
  // Salvar o arquivo atualizado
  fs.writeFileSync(routesPath, contentWithPathImport);
  console.log('‚úÖ Import de path adicionado com sucesso!');
}

console.log('üéâ Configura√ß√£o conclu√≠da! O servidor agora pode servir arquivos est√°ticos da pasta uploads.');